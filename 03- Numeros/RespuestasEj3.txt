1)  En un double dispatch (DD), ¿qué información aporta cada uno de los dos llamados?

	El DD se utiliza cuando tenemos 2 objetos polimórficos que interactúan entre sí. El primer llamado obtiene el "tipo"
	del primer objeto, es decir, resuelve lo que genera polimorfismo en este. El segundo llamado hace lo mismo para el 
	objeto restante, logrando así, solucionar un problema de polimorfismo múltiple.


2)  Con lo que vieron y saben hasta ahora, ¿donde les parece mejor tener la lógica de cómo instanciar un objeto? ¿por qué? 
    ¿Y si se crea ese objeto desde diferentes lugares y de diferentes formas? ¿cómo lo resuelven?

    	La lógica de cómo instanciar un objeto está en un método de instancia del mismo, y es llamado desde un método de clase.
    	Si tuvieramos un objeto con diferentes formas, como el caso de los enteros y fracciones, se implementa la lógica en cada
    	subclase, para que el objeto pueda tener la forma especificada. Este método es llamado desde un método de clase en la 
    	superclase, que se encarga de detectar a cuál subclase debe pertenecer el objeto deseado, y luego llama a esta para instanciarlo.


3)  Con lo que vieron y trabajaron hasta ahora, ¿qué criterio están usando para categorizar métodos?

	Insertamos un método en categorías que contengan a otros métodos cuyo comportamiento sea similar, y que se pueda etiquetar o nombrar
	con un nombre genérico y declarativo, para facilitar al usuario la legibilidad y sea más simple encontrarlo desde el Class Browser.


4)  Si todas las subclases saben responder un mismo mensaje, ¿por qué ponemos ese mensaje sólo con un “self subclassResponsibility” en la superclase? ¿para qué sirve?

	Es una forma de producir una clase abstracta. Sirve para que el usuario comprenda que, dependiendo de la subclase, 
	el método asociado varía, por lo que es óptimo advertirlo, ya sea para la comprensión del comportamiento del objeto, o para que se encargue 
	de implementarlo. Además, al crear una nueva subclase sabemos que mensajes debemos implementar para el correcto funcionamiento de la subclase.


5)  ¿Por qué está mal/qué problemas trae romper encapsulamiento?

	Está mal romper el encapsulamiento porque es una forma de derivar la responsabilidad de resolver un problema a un objeto al que no le corresponde.
	Cuando se modela un programa, lo ideal es que quede bien definido qué rol cumple cada objeto, y no que los objetos se estén pasando información que
	no debería ser conocida por el otro.
	Además, al hacer esto, el programa es más propenso a propagar errores o bugs, ya que modificarle algún atributo a un objeto, implica modificar
	a los objetos que acceden a este atributo. En consecuencia, cualquier modificación errónea puede conllevar a que muchos objetos empiecen a 
	comportarse de manera inadecuada.

	
	
	
	